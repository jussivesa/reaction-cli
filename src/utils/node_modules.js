import { execSync as exec } from 'child_process';
import * as Config from './config';
import Log from './logger';
import { hasYarn, yarnOrNpm } from './yarn_check';


export function updateConfigWhenYarnUninstalled() {
  if (Config.get('global', 'yarn') && !hasYarn()) {
    Config.unset('global', 'yarn');
  }
}


export function initInstallModules(dirName) {
  updateConfigWhenYarnUninstalled();
  let cmd = yarnOrNpm();
  cmd += (cmd === 'yarn') ? ' install --ignore-engines' : ' install';

  try {
    exec(`cd ${dirName} && meteor ${cmd}`, { stdio: 'inherit' });
  } catch (err) {
    Log.error('\nError: Node modules were not successfully installed. Exiting.');
    process.exit(1);
  }
}


export function installModules() {
  updateConfigWhenYarnUninstalled();
  let cmd = yarnOrNpm();
  cmd += (cmd === 'yarn') ? ' install --ignore-engines' : ' install';

  try {
    exec(`meteor ${cmd}`, { stdio: 'inherit' });
  } catch (err) {
    Log.error('\nError: Node modules were not successfully installed. Exiting.');
    process.exit(1);
  }
}


export function upgradeModules() {
  updateConfigWhenYarnUninstalled();
  let cmd = yarnOrNpm();
  cmd += (cmd === 'yarn') ? ' upgrade --ignore-engines' : ' update';

  try {
    exec(`meteor ${cmd}`, { stdio: 'inherit' });
  } catch (err) {
    Log.error('\nError: Node modules were not successfully installed. Exiting.');
    process.exit(1);
  }
}
